import pandas as pd
from sklearn.metrics import matthews_corrcoef
import numpy as np
from sklearn import metrics
from sklearn.model_selection import StratifiedKFold
from sklearn.dummy import DummyClassifier
from sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier, RidgeClassifier
from sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, BaggingClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier, NearestCentroid
from sklearn.svm import SVC, NuSVC, LinearSVC
from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.metrics import accuracy_score, precision_score
import matplotlib.pyplot as plt
# Set the random seed for reproducibility
np.random.seed(1234)
df = pd.read_csv('1vs2A.csv')
scaler = StandardScaler()
data_normalized = scaler.fit_transform(df.iloc[:,1:])
data_normalized
new=pd.DataFrame(data_normalized)
X = new
y = df.iloc[:,:1]

skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=49)
classifiers = [DummyClassifier(), LogisticRegression(class_weight='balanced'), Perceptron(class_weight='balanced'), SGDClassifier(class_weight='balanced'), RidgeClassifier(class_weight='balanced'),
               DecisionTreeClassifier(class_weight='balanced'), ExtraTreeClassifier(class_weight='balanced'), RandomForestClassifier(class_weight='balanced'), AdaBoostClassifier(),
               GradientBoostingClassifier(), BaggingClassifier(), ExtraTreesClassifier(class_weight='balanced'), KNeighborsClassifier(),
               NearestCentroid(), SVC(class_weight='balanced'), NuSVC(class_weight='balanced'), LinearSVC(class_weight='balanced'), GaussianNB(), BernoulliNB(), LinearDiscriminantAnalysis(),
               QuadraticDiscriminantAnalysis(), LGBMClassifier(class_weight='balanced'), XGBClassifier(class_weight='balanced')]

classifier_names = ['Dummy', 'Logistic Regression', 'Perceptron', 'SGD Classifier', 'Ridge Classifier', 'Decision Tree',
                    'Extra Tree', 'Random Forest', 'AdaBoost', 'Gradient Boosting', 'Bagging', 'Extra Trees', 'KNN',
                    'Nearest Centroid', 'SVM', 'NuSVM', 'Linear SVM', 'Gaussian Naive Bayes', 'Bernoulli Naive Bayes',
                    'Linear Discriminant Analysis', 'Quadratic Discriminant Analysis', 'LGBM Classifier', 'XGB Classifier']

for name, clf in zip(classifier_names, classifiers):
    print(f"Classifier: {name}")
    accs, preRs, preSs, mccs = [], [], [], []
    for train_index, test_index in skf.split(X, y):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)
        acc = accuracy_score(y_test, y_pred)
        preR = precision_score(y_test, y_pred, pos_label=0)
        preS = precision_score(y_test, y_pred, pos_label=1)
        mcc = matthews_corrcoef(y_test, y_pred)
        accs.append(acc)
        preRs.append(preR)
        preSs.append(preS)
        mccs.append(mcc)
        print(f"Accuracy: {accs}")
        print(f"Precision (0 label): {preRs}")
        print(f"Precision (1 label): {preSs}")
        print(f"mcc: {mccs}\n")

      
